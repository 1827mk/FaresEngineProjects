// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.domain;

import com.nbu.fares.domain.TransportDataOnDemand;
import com.nbu.fares.domain.Travel;
import com.nbu.fares.domain.TravelDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TravelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TravelDataOnDemand: @Component;
    
    private Random TravelDataOnDemand.rnd = new SecureRandom();
    
    private List<Travel> TravelDataOnDemand.data;
    
    @Autowired
    TransportDataOnDemand TravelDataOnDemand.transportDataOnDemand;
    
    public Travel TravelDataOnDemand.getNewTransientTravel(int index) {
        Travel obj = new Travel();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setLocationDisCode(obj, index);
        setLocationDisName(obj, index);
        setLocationSourCode(obj, index);
        setLocationSourName(obj, index);
        setTravelCode(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void TravelDataOnDemand.setCreatedBy(Travel obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void TravelDataOnDemand.setCreatedDate(Travel obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void TravelDataOnDemand.setLocationDisCode(Travel obj, int index) {
        String locationDisCode = "locationDisCode_" + index;
        obj.setLocationDisCode(locationDisCode);
    }
    
    public void TravelDataOnDemand.setLocationDisName(Travel obj, int index) {
        String locationDisName = "locationDisName_" + index;
        obj.setLocationDisName(locationDisName);
    }
    
    public void TravelDataOnDemand.setLocationSourCode(Travel obj, int index) {
        String locationSourCode = "locationSourCode_" + index;
        obj.setLocationSourCode(locationSourCode);
    }
    
    public void TravelDataOnDemand.setLocationSourName(Travel obj, int index) {
        String locationSourName = "locationSourName_" + index;
        obj.setLocationSourName(locationSourName);
    }
    
    public void TravelDataOnDemand.setTravelCode(Travel obj, int index) {
        String travelCode = "travelCode_" + index;
        obj.setTravelCode(travelCode);
    }
    
    public void TravelDataOnDemand.setUpdatedBy(Travel obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void TravelDataOnDemand.setUpdatedDate(Travel obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public Travel TravelDataOnDemand.getSpecificTravel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Travel obj = data.get(index);
        Long id = obj.getId();
        return Travel.findTravel(id);
    }
    
    public Travel TravelDataOnDemand.getRandomTravel() {
        init();
        Travel obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Travel.findTravel(id);
    }
    
    public boolean TravelDataOnDemand.modifyTravel(Travel obj) {
        return false;
    }
    
    public void TravelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Travel.findTravelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Travel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Travel>();
        for (int i = 0; i < 10; i++) {
            Travel obj = getNewTransientTravel(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
