// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.domain;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.Date;
import java.util.List;

privileged aspect Promote_Custom_Jpa_ActiveRecord {

    static Logger logger = LoggerFactory.getLogger(Promote_Custom_Jpa_ActiveRecord.class);

    public static List Promote.findAllPromoteCustomJPA() {
        Session session = (Session) Promote.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Promote.class);
        criteria.addOrder(Order.asc("promoteCode"));
        return criteria.list();
    }

    public static List<Promote> Promote.findPromotesByCode(String promoteCode) {
        Session session = (Session) Promote.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Promote.class);
        Criterion codeRestriction = Restrictions.eq("promoteCode", promoteCode);
        criteria.add(codeRestriction);
        return criteria.list();
    }

    public static List<Promote> Promote.findPromoteCodeDuplicate(String promoteCode) {
        Session session = (Session) Promote.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Promote.class);

        Criterion codeRestriction = (Restrictions.and(
                Restrictions.eq("promoteCode", promoteCode))
        );
        criteria.add(codeRestriction);
        return criteria.list();
    }

    public static List<Promote> Promote.findPromoteDuplicateCD(String promotion,Date dateFares) {
        Session session = (Session) Promote.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Promote.class);
        criteria.createCriteria("promotion","promotion");
        criteria.createCriteria("dateFares","dateFares");

        Criterion codeRestriction = (Restrictions.and(
                Restrictions.eq("promotion.promotionCode", promotion),
                Restrictions.eq("dateFares.dateFared", dateFares))
        );
        criteria.add(codeRestriction);
        return criteria.list();
    }
}
