// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.domain.Promotion;
import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.List;

privileged aspect PromotionController_Custom_Controller_Json {

    @RequestMapping(value = "/findAllPromotion", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PromotionController.findAllPromotion() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Promotion> promotionList = Promotion.findAllPromotions();
        return new ResponseEntity<String>((new JSONSerializer()
                .include("id")
                .include("version")
                .include("promotionCode")
                .include("promotionName")
                .exclude("*").deepSerialize(promotionList)), headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromotionCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromotionController.findPromotionCode(@RequestParam(value="promotionCode", required = false)String promotionCode,
                                                                       @RequestParam(value="promotionName", required = false)String promotionName) {
        List<Promotion> parameterDetail=Promotion.findPromotionByCode(promotionCode,promotionName);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("promotionCode")
                .include("promotionName")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromotionsByCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromotionController.findPromotionsByCode(@RequestParam(value="promotionCode", required = false)String promotionCode) {
        List<Promotion> parameterDetail=Promotion.findPromotionsByCode(promotionCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("promotionCode")
                .include("promotionName")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromotionCodeDuplicate", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromotionController.findPromotionCodeDuplicate(@RequestParam(value="promotionCode", required = false)String promotionCode) {
        List<Promotion> parameterDetail=Promotion.findPromotionCodeDuplicate(promotionCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("promotionCode")
                .include("promotionName")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }
    @RequestMapping(value = "/findPromotionNameDuplicate", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromotionController.findPromotionNameDuplicate(@RequestParam(value="promotionName", required = false)String promotionName) {
        List<Promotion> parameterDetail=Promotion.findPromotionNameDuplicate(promotionName);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("promotionCode")
                .include("promotionName")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }
    
}
