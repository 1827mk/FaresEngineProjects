// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.security.AppRole;
import com.nbu.fares.security.AppUser;
import flexjson.JSONSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;

privileged aspect AppUserController_Custom_Controller_Json {

    static Logger logger = LoggerFactory.getLogger(AppUserController_Custom_Controller_Json.class);

    @RequestMapping(value = "/findAlluser", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppUserController.findAlluser() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<AppUser> users = AppUser.findAllAppUsers();
        return new ResponseEntity<String>((new JSONSerializer()
                .include("id")
                .include("version")
                .include("username")
//                .include("password")
//                .include("confirmpassword")
                .include("needLogin")
                .include("userEmail")
                .include("userRole.id")
                .include("userRole.name")
                .include("userRole.description")
                .exclude("*").deepSerialize(users)), headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findCheckDuplicateUserAndMail", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>AppUserController.findCheckDuplicateUserAndMail(@RequestParam(value="username", required = false)String username,
                                                                      @RequestParam(value="userEmail", required = false)String userEmail) {
        List<AppUser> parameterDetail = AppUser.findCheckDuplicateUserAndMail(username,userEmail);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("username")
//                .include("password")
//                .include("confirmpassword")
                .include("needLogin")
                .include("userEmail")
                .include("userRole.name")
                .include("USERROLE.name")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findCheckDuplicateUser", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>AppUserController.findCheckDuplicateUser(@RequestParam(value="username", required = false)String username) {
        List<AppUser> parameterDetail = AppUser.findCheckDuplicateUser(username);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("username")
//                .include("password")
//                .include("confirmpassword")
                .include("needLogin")
                .include("userEmail")
                .include("userRole.name")
                .include("USERROLE.name")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/checkOldPass", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>AppUserController.checkOldPass(@RequestParam(value="username", required = false)String username,
                                                                @RequestParam(value="password", required = false)String password) {
        List<AppUser> parameterDetail = AppUser.checkOldPass(username,password);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("username")
//                .include("password")
//                .include("confirmpassword")
                .include("needLogin")
                .include("userEmail")
                .include("userRole.name")
                .include("USERROLE.name")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }


    @RequestMapping(value = "/insertDataUser", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppUserController.insertDataUser(@RequestParam(value="username", required = false)String username,
                                                               @RequestParam(value="password", required = false)String password,
                                                               @RequestParam(value="confirmpassword", required = false)String confirmpassword,
                                                               @RequestParam(value="needLogin", required = false)Boolean needLogin,
                                                               @RequestParam(value="userEmail", required = false)String userEmail,
                                                               @RequestParam(value="createdBy", required = false)String createdBy,
                                                               @RequestParam(value="updatedBy", required = false)String updatedBy,
                                                               @RequestParam(value="userRole", required = false)long userRole ) {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Date date = new Date();
        AppRole appRole = AppRole.findAppRole(userRole);

        if(username != null && userEmail != null && password.equals(confirmpassword)){
            AppUser appUser = new AppUser();
            appUser.setUsername(username);
            appUser.setPassword(password);
            appUser.setConfirmpassword(confirmpassword);
            appUser.setNeedLogin(needLogin);
            appUser.setUserEmail(userEmail);
            appUser.setCreatedBy(createdBy);
            appUser.setUpdatedBy(updatedBy);
            appUser.setCreatedDate(date);
            appUser.setUpdatedDate(date);
            appUser.setUserRole(appRole);
            appUser.persist();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.CREATED);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.OK);
        }
    }

    @RequestMapping(value = "/updateDataUser", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppUserController.updateDataUser(@RequestParam(value="id", required = false)Long userId,
                                                                   @RequestParam(value="username", required = false)String username,
                                                                   @RequestParam(value="password", required = false)String password,
                                                                   @RequestParam(value="confirmpassword", required = false)String confirmpassword,
                                                                   @RequestParam(value="needLogin", required = false)Boolean needLogin,
                                                                   @RequestParam(value="userEmail", required = false)String userEmail,
                                                                   @RequestParam(value="userRole", required = false)long userRole,
                                                                   @RequestParam(value="updatedBy", required = false)String updatedBy) {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        AppUser appUser = AppUser.findAppUser(userId);
        Date date = new Date();
//
//        logger.error("userId:"+userId+"\n");
//        logger.error("username:"+username+"\n");
//        logger.error("password:"+password+"\n");
//        logger.error("confirmpassword:"+confirmpassword+"\n");
//        logger.error("needLogin:"+needLogin+"\n");
//        logger.error("userEmail:"+userEmail+"\n");
//        logger.error("updatedBy:"+updatedBy+"\n\n\n\n\n");

        AppRole appRole = AppRole.findAppRole(userRole);

        if(username!= null && userEmail != null &&  password !="" && confirmpassword != "" && password.equals(confirmpassword)){

            appUser.setUsername(username);
            appUser.setPassword(password);
            appUser.setConfirmpassword(confirmpassword);
            appUser.setNeedLogin(needLogin);
            appUser.setUserEmail(userEmail);
            appUser.setUserRole(appRole);
            appUser.setUpdatedBy(updatedBy);
            appUser.setUpdatedDate(date);
            appUser.merge();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.OK);
        }else if(password== null || password == ""){
            appUser.setUsername(username);
            appUser.setPassword(appUser.getPassword());
            appUser.setConfirmpassword(appUser.getConfirmpassword());
            appUser.setNeedLogin(needLogin);
            appUser.setUserEmail(userEmail);
            appUser.setUpdatedBy(updatedBy);
            appUser.setUserRole(appRole);
            appUser.setUpdatedDate(date);
            appUser.merge();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.OK);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.NO_CONTENT);
        }
    }
}
