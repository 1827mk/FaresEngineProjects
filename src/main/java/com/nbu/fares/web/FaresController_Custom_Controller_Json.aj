// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.domain.Fares;
import com.nbu.fares.domain.Promote;
import com.nbu.fares.domain.Travel;
import com.nbu.fares.service.FaresService;
import flexjson.JSONSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

privileged aspect FaresController_Custom_Controller_Json {

    @Autowired
    FaresService faresService;

    static Logger logger = LoggerFactory.getLogger(FaresController_Custom_Controller.class);

    @RequestMapping(value = "/findAllFares", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>FaresController.findAllFares() {

        List<Fares> result = Fares.findAllFaresCustomJPA();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (result == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer()
                .include("id")
                .include("version")
                .include("faresCode")
                .include("price")
                .include("travel.id")
                .include("travel.travelCode")
                .include("travel.locationSourCode")
                .include("travel.locationSourName")
                .include("travel.locationDisCode")
                .include("travel.locationDisName")
                .include("travel.transport.transportCode")
                .include("travel.transport.transportName")
                .include("travel.transport.transportBusiness")
                .include("promote.id")
                .include("promote.promoteCode")
                .include("promote.promotePrice")
                .include("promote.promotion")
                .include("promote.dateFared")
                .exclude("*")
                .deepSerialize(result)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findFaresDuplicate", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>FaresController.findFaresDuplicate(@RequestParam(value="faresCode", required = false)String faresCode,
                                                                    @RequestParam(value="price", required = false)Double price,
                                                                    @RequestParam(value="travel", required = false)String travel,
                                                                    @RequestParam(value="promote", required = false)String promote) {
        List<Fares> parameterDetail = Fares.findFaresCodeDuplicate(faresCode,price,travel,promote);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("faresCode")
                .include("price")
                .include("travel.id")
                .include("travel.travelCode")
                .include("promote.id")
                .include("promote.promoteCode")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }
    @RequestMapping(value = "/checkDuplicateCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>FaresController.checkDuplicateCode(@RequestParam(value="faresCode", required = false)String faresCode) {
        List<Fares> parameterDetail = Fares.checkDuplicateCode(faresCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("faresCode")
                .include("price")
                .include("travel.id")
                .include("travel.travelCode")
                .include("promote.id")
                .include("promote.promoteCode")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/checkDuplicateCodeFTP", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>FaresController.checkDuplicateCodeFTP(@RequestParam(value="faresCode", required = false)String faresCode,
                                                                    @RequestParam(value="travel", required = false)String travel,
                                                                    @RequestParam(value="promote", required = false)String promote) {
        List<Fares> parameterDetail = Fares.checkDuplicateCodeFTP(faresCode,travel,promote);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("faresCode")
                .include("price")
                .include("travel.id")
                .include("travel.travelCode")
                .include("promote.id")
                .include("promote.promoteCode")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }
    @RequestMapping(value = "/checkDuplicateCodeTP", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>FaresController.checkDuplicateCodeTP(@RequestParam(value="travel", required = false)String travel,
                                                                      @RequestParam(value="promote", required = false)String promote) {
        List<Fares> parameterDetail = Fares.checkDuplicateCodeTP(travel,promote);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("faresCode")
                .include("price")
                .include("travel.id")
                .include("travel.travelCode")
                .include("promote.id")
                .include("promote.promoteCode")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }


    @RequestMapping(value = "/findFaresByCriteria/{code}",headers = "Accept=application/json")
    ResponseEntity<String> findFaresByCriteria(@PathVariable String code){
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List result = new ArrayList();
        try {
            result= faresService.findFaresByCriteria(code);
            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class").deepSerialize(result)), headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);

        }
    }

    @RequestMapping(value = "/insertData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FaresController.insertData(@RequestParam(value="faresCode", required = false)String faresCode,
                                                             @RequestParam(value="price", required = false)Double price,
                                                             @RequestParam(value="travel", required = false)long travel,
                                                             @RequestParam(value="promote", required = false)long promote,
                                                             @RequestParam(value="createdBy", required = false)String createdBy,
                                                             @RequestParam(value="updatedBy", required = false)String updatedBy) {

//        logger.error("Code : "+faresCode+" :: " + "price : " + price + " :: " + "travel : "+ travel + " :: " + "promote : " + promote + "\n");
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Travel travels = Travel.findTravel(travel);
        Promote promote1s = Promote.findPromote(promote);
        DecimalFormat decim = new DecimalFormat("#.##");
        Double price2 = Double.parseDouble(decim.format(price));

//        Double priceDou = Double.parseDouble(price.replace(",",".") );

        Date date = new Date();
        if(faresCode!= null && price != null && travels != null){
            Fares fares = new Fares();
            fares.setFaresCode(faresCode);
            fares.setPrice(price2);
            fares.setTravel(travels);
            fares.setPromote(promote1s);
            fares.setCreatedBy(createdBy);
            fares.setUpdatedBy(updatedBy);
            fares.setCreatedDate(date);
            fares.setUpdatedDate(date);
            fares.persist();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.CREATED);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.OK);
        }
    }

    @RequestMapping(value = "/updateData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FaresController.updateData(@RequestParam(value="fareId", required = false)Long fareId,
                                                             @RequestParam(value="faresCode", required = false)String faresCode,
                                                             @RequestParam(value="price", required = false)Double price,
                                                             @RequestParam(value="travel", required = false)long travel,
                                                             @RequestParam(value="promote", required = false)long promote,
                                                             @RequestParam(value="updatedBy", required = false)String updatedBy) {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Travel travels = Travel.findTravel(travel);
        Promote promote1s = Promote.findPromote(promote);
        Fares fares = Fares.findFares(fareId);
        DecimalFormat decim = new DecimalFormat("#.##");
        Double price2 = Double.parseDouble(decim.format(price));
        Date date = new Date();

        if(faresCode!= null && price != null && travels != null){
            fares.setFaresCode(faresCode);
            fares.setPrice(price2);
            fares.setTravel(travels);
            fares.setPromote(promote1s);
            fares.setUpdatedBy(updatedBy);
            fares.setUpdatedDate(date);
            fares.merge();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.OK);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.NO_CONTENT);
        }
    }
}
