// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.domain.DateFares;
import com.nbu.fares.domain.Promote;
import com.nbu.fares.web.DateFaresController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DateFaresController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DateFaresController.create(@Valid DateFares dateFares, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dateFares);
            return "datefareses/create";
        }
        uiModel.asMap().clear();
        dateFares.persist();
        return "redirect:/datefareses/" + encodeUrlPathSegment(dateFares.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DateFaresController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DateFares());
        return "datefareses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String DateFaresController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("datefares", DateFares.findDateFares(id));
        uiModel.addAttribute("itemId", id);
        return "datefareses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DateFaresController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("datefareses", DateFares.findDateFaresEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) DateFares.countDateFareses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("datefareses", DateFares.findAllDateFareses(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "datefareses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DateFaresController.update(@Valid DateFares dateFares, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, dateFares);
            return "datefareses/update";
        }
        uiModel.asMap().clear();
        dateFares.merge();
        return "redirect:/datefareses/" + encodeUrlPathSegment(dateFares.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String DateFaresController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, DateFares.findDateFares(id));
        return "datefareses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String DateFaresController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DateFares dateFares = DateFares.findDateFares(id);
        dateFares.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/datefareses";
    }
    
    void DateFaresController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("dateFares_createddate_date_format", "dd/MM/yyyy");
        uiModel.addAttribute("dateFares_updateddate_date_format", "dd/MM/yyyy");
        uiModel.addAttribute("dateFares_datefared_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void DateFaresController.populateEditForm(Model uiModel, DateFares dateFares) {
        uiModel.addAttribute("dateFares", dateFares);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("promotes", Promote.findAllPromotes());
    }
    
    String DateFaresController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
