// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.domain.DateFares;
import com.nbu.fares.domain.Promotion;
import com.nbu.fares.domain.Transport;
import com.nbu.fares.domain.Travel;
import flexjson.JSONSerializer;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.Date;
import java.util.List;

privileged aspect TravelController_Custom_Controller_Json {

    static Logger LOGGER = LoggerFactory.getLogger(TravelController_Custom_Controller_Json.class);

    @RequestMapping(value = "/findAllTravel", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TravelController.findAllTravel() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Travel> travelList = Travel.findAllTravels();
        return new ResponseEntity<String>((new JSONSerializer()
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.id")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*").deepSerialize(travelList)), headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findTravelCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.findTravelCode(@RequestParam(value="travelCode", required = false)String travelCode,
                                                                 @RequestParam(value="locationSourCode", required = false)String locationSourCode,
                                                                 @RequestParam(value="locationDisCode", required = false)String locationDisCode,
                                                                 @RequestParam(value="transportCode", required = false)String transportCode) {
        List<Travel> parameterDetail=Travel.findTravelByCode(travelCode,locationSourCode,locationDisCode,transportCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        LOGGER.info("JSON" + transportCode);
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findTravelsByCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.findTravelsByCode(@RequestParam(value="travelCode", required = false)String travelCode) {
        List<Travel> parameterDetail=Travel.findTravelsByCode(travelCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findTravelDuplicate", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.findTravelDuplicate(@RequestParam(value="travelCode", required = false)String travelCode,
                                                                    @RequestParam(value="locationSourCode", required = false)String locationSourCode,
                                                                    @RequestParam(value="locationDisCode", required = false)String locationDisCode,
                                                                    @RequestParam(value="transport", required = false)String transport) {
        List<Travel> parameterDetail = Travel.findTravelDuplicate(travelCode,locationSourCode,locationDisCode,transport);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }



    @RequestMapping(value = "/checkDuplicateCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.checkDuplicateCode(@RequestParam(value="travelCode", required = false)String travelCode) {
        List<Travel> parameterDetail = Travel.findTravelCodeDuplicate(travelCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/checkDuplicateCodeSDT", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.checkDuplicateCodeSDT(@RequestParam(value="locationSourCode", required = false)String locationSourCode,
                                                                       @RequestParam(value="locationDisCode", required = false)String locationDisCode,
                                                                       @RequestParam(value="transport", required = false)String transport) {
        List<Travel> parameterDetail = Travel.checkDuplicateCodeSDT(locationSourCode,locationDisCode,transport);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("version")
                .include("travelCode")
                .include("locationSourCode")
                .include("locationSourName")
                .include("locationDisCode")
                .include("locationDisName")
                .include("transport.transportCode")
                .include("transport.transportName")
                .include("transport.transportBusiness")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/insertsData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>TravelController.insertsData(@RequestParam(value="travelCode", required = false)String travelCode,
                                                               @RequestParam(value="sourCode", required = false)String locationSourCode,
                                                               @RequestParam(value="sourName", required = false)String locationSourName,
                                                               @RequestParam(value="disCode", required = false)String locationDisCode,
                                                               @RequestParam(value="disName", required = false)String locationDisName,
                                                               @RequestParam(value="createdBy", required = false)String createdBy,
                                                               @RequestParam(value="updatedBy", required = false)String updatedBy,
                                                               @RequestParam(value="transportCode", required = false)long transportId) {

//        logger.error("Code : "+faresCode+" :: " + "price : " + price + " :: " + "travel : "+ travel + " :: " + "promote : " + promote + "\n");
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Transport transport = Transport.findTransport(transportId);
        Date date = new Date();

        if(travelCode!= null  && transport != null){
            Travel travel = new Travel();
            travel.setTravelCode(travelCode);
            travel.setLocationSourName(locationSourName);
            travel.setLocationSourCode(locationSourCode);
            travel.setLocationDisName(locationDisName);
            travel.setLocationDisCode(locationDisCode);
            travel.setTransport(transport);
            travel.setCreatedBy(createdBy);
            travel.setUpdatedBy(updatedBy);
            travel.setCreatedDate(date);
            travel.setCreatedDate(date);
            travel.persist();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.CREATED);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.OK);
        }
    }

    @RequestMapping(value = "/updatesData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TravelController.updatesData(@RequestParam(value="travelId", required = false)Long travelId,
                                                               @RequestParam(value="travelCode", required = false)String travelCode,
                                                               @RequestParam(value="sourCode", required = false)String locationSourCode,
                                                               @RequestParam(value="sourName", required = false)String locationSourName,
                                                               @RequestParam(value="disCode", required = false)String locationDisCode,
                                                               @RequestParam(value="disName", required = false)String locationDisName,
                                                               @RequestParam(value="updatedBy", required = false)String updatedBy,
                                                               @RequestParam(value="transportCode", required = false)long transportId) {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Transport transport = Transport.findTransport(transportId);
        Travel travel = Travel.findTravel(travelId);
        Date date = new Date();

        if(travelCode != null && locationSourCode != null && locationDisCode != null && transport != null){
            travel.setTravelCode(travelCode);
            travel.setLocationSourName(locationSourName);
            travel.setLocationSourCode(locationSourCode);
            travel.setLocationDisName(locationDisName);
            travel.setLocationDisCode(locationDisCode);
            travel.setTransport(transport);
            travel.setUpdatedBy(updatedBy);
            travel.setUpdatedDate(date);
            travel.merge();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.OK);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.NO_CONTENT);
        }
    }
}
