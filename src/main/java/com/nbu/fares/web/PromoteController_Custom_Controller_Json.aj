// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbu.fares.web;

import com.nbu.fares.domain.DateFares;
import com.nbu.fares.domain.Promote;
import com.nbu.fares.domain.Promotion;
import flexjson.JSONSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

privileged aspect PromoteController_Custom_Controller_Json {

    static Logger logger = LoggerFactory.getLogger(PromoteController_Custom_Controller_Json.class);

    @RequestMapping(value = "/findAllPromote", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromoteController.findAllPromote() {

        List<Promote> result = Promote.findAllPromoteCustomJPA();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (result == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer()
                .include("id")
                .include("promoteCode")
                .include("promotePrice")
                .include("promotion")
                .include("dateFared")
                .exclude("*")
                .deepSerialize(result)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromotesByCode", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromoteController.findPromotesByCode(@RequestParam(value="promoteCode", required = false)String promoteCode) {
        List<Promote> parameterDetail = Promote.findPromotesByCode(promoteCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("promoteCode")
                .include("promotePrice")
                .include("promotion")
                .include("dateFared")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromoteCodeDuplicate", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromoteController.findPromoteCodeDuplicate(@RequestParam(value="promote", required = false)String promoteCode) {
        List<Promote> parameterDetail = Promote.findPromoteCodeDuplicate(promoteCode);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("promoteCode")
                .include("promotePrice")
                .include("promotion")
                .include("dateFared")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/findPromoteDuplicateCD", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String>PromoteController.findPromoteDuplicateCD(@RequestParam(value="promotion", required = false)String promotion,
                                                                        @RequestParam(value="dateFares", required = false)Date dateFares) {
        List<Promote> parameterDetail = Promote.findPromoteDuplicateCD(promotion,dateFares);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (parameterDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                .include("id")
                .include("promoteCode")
                .include("promotePrice")
                .include("promotion")
                .include("dateFared")
                .exclude("*")
                .deepSerialize(parameterDetail)),headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/insertsData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PromoteController.insertsData(@RequestParam(value="promoteCode", required = false)String promoteCode,
                                                                @RequestParam(value="promotePrice", required = false)Double promotePrice,
                                                                @RequestParam(value="promotion", required = false)String promotion,
                                                                @RequestParam(value="createdBy", required = false)String createdBy,
                                                                @RequestParam(value="updatedBy", required = false)String updatedBy,
                                                                @RequestParam(value="date", required = false)Date dateFares) {

//        logger.error("Code : "+faresCode+" :: " + "price : " + price + " :: " + "travel : "+ travel + " :: " + "promote : " + promote + "\n");
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
//        Promotion promotion = Promotion.findPromotion(promotionId);
//        DateFares date = DateFares.findDateFares(dateFaresId);
        DecimalFormat decim = new DecimalFormat("#.##");
        Double price2 = Double.parseDouble(decim.format(promotePrice));
        Date datenow = new Date();

        if(promoteCode!= null && promotePrice != null && promotion != null && dateFares != null){
            Promote promote = new Promote();
            promote.setPromoteCode(promoteCode);
            promote.setPromotePrice(price2);
            promote.setPromotion(promotion);
            promote.setDateFared(dateFares);
            promote.setCreatedBy(createdBy);
            promote.setCreatedDate(datenow);
            promote.setUpdatedBy(updatedBy);
            promote.setUpdatedDate(datenow);
            promote.persist();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.CREATED);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.OK);
        }
    }

    @RequestMapping(value = "/updatesData", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PromoteController.updatesData(@RequestParam(value="promoteId", required = false)Long promoteId,
                                                                @RequestParam(value="promoteCode", required = false)String promoteCode,
                                                                @RequestParam(value="promotePrice", required = false)Double promotePrice,
                                                                @RequestParam(value="promotion", required = false)String promotion,
                                                                @RequestParam(value="updatedBy", required = false)String updatedBy,
                                                                @RequestParam(value="date", required = false)Date dateFares) {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
//        Promotion promotion = Promotion.findPromotion(promotionId);
//        DateFares date = DateFares.findDateFares(dateFaresId);
        Promote promote = Promote.findPromote(promoteId);
        DecimalFormat decim = new DecimalFormat("#.##");
        Double price2 = Double.parseDouble(decim.format(promotePrice));
        Date datenow = new Date();

        if(promoteCode != null && promotePrice != null && promotion != null && dateFares != null){
            promote.setPromoteCode(promoteCode);
            promote.setPromotePrice(price2);
            promote.setPromotion(promotion);
            promote.setDateFared(dateFares);
            promote.setUpdatedBy(updatedBy);
            promote.setUpdatedDate(datenow);
            promote.merge();
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("success")),headers, HttpStatus.OK);
        }else{
            return new ResponseEntity<String>((new JSONSerializer().deepSerialize("failed")),headers, HttpStatus.NO_CONTENT);
        }
    }
}
